# study_bot.py
import json
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.getenv('8053874219:AAH9vOBmy18Rr0V0w52xlmkgEQgK4vsfzUQ
')
ADMIN_ID = int(os.getenv('6430355266'))

DATA_FILE = 'data.json'
user_states = {}

def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

data = load_data()

def get_categories_keyboard():
    buttons = [[KeyboardButton(cat)] for cat in data.keys()]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def get_admin_menu():
    return ReplyKeyboardMarkup([
        ["➕ إضافة تصنيف", "📁 إضافة ملف"]
    ], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:
        await update.message.reply_text("أهلاً أدمن! اختر خيار:", reply_markup=get_admin_menu())
    else:
        await update.message.reply_text("أهلاً بك! اختر تصنيف لعرض الملفات:", reply_markup=get_categories_keyboard())

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id == ADMIN_ID:
        if text == "➕ إضافة تصنيف":
            user_states[user_id] = "adding_category"
            await update.message.reply_text("أرسل اسم التصنيف الجديد:")
        elif text == "📁 إضافة ملف":
            user_states[user_id] = "selecting_category"
            await update.message.reply_text("اختر تصنيف لإضافة الملف:", reply_markup=get_categories_keyboard())
        elif user_states.get(user_id) == "adding_category":
            category = text
            if category in data:
                await update.message.reply_text("هذا التصنيف موجود بالفعل.", reply_markup=get_admin_menu())
            else:
                data[category] = []
                save_data(data)
                await update.message.reply_text(f"تمت إضافة التصنيف {category}.", reply_markup=get_admin_menu())
            user_states.pop(user_id)
        elif user_states.get(user_id) == "selecting_category" and text in data:
            context.user_data["selected_category"] = text
            user_states[user_id] = "waiting_file"
            await update.message.reply_text(f"أرسل الآن الملف لإضافته تحت التصنيف: {text}")
        elif text in data:
            files = data[text]
            if files:
                for file in files:
                    await update.message.reply_document(document=file["file_id"], caption=file["file_name"])
            else:
                await update.message.reply_text("لا توجد ملفات في هذا التصنيف.")
    else:
        if text in data:
            files = data[text]
            if files:
                for file in files:
                    await update.message.reply_document(document=file["file_id"], caption=file["file_name"])
            else:
                await update.message.reply_text("لا توجد ملفات في هذا التصنيف.")
        else:
            await update.message.reply_text("اختر من الأزرار فقط.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return

    if user_states.get(user_id) == "waiting_file":
        document = update.message.document
        category = context.user_data.get("selected_category")
        if category:
            data[category].append({
                "file_id": document.file_id,
                "file_name": document.file_name
            })
            save_data(data)
            await update.message.reply_text(f"تم رفع الملف بنجاح إلى التصنيف {category}.", reply_markup=get_admin_menu())
            user_states.pop(user_id)
        else:
            await update.message.reply_text("يرجى اختيار تصنيف أولاً.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.run_polling()

if __name__ == "__main__":
    main()
